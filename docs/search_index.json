[["index.html", "Data Science for Biologists - 5023Y Chapter 1 Introduction 1.1 Approach and style 1.2 Teaching 1.3 Introduction to R 1.4 Getting around on RStudio 1.5 Reading 1.6 Get Help!", " Data Science for Biologists - 5023Y Philip Leftwich 2021-09-29 Chapter 1 Introduction 1.1 Approach and style This book is designed to accompany the module BIO-5023Y for those new to R looking for best practices and tips. So it must be both accessible and succinct. The approach here is to provide just enough text explanation that someone very new to R can apply the code and follow what the code is doing. It is not a comprehensive textbook. A few other points: This is a code reference book accompanied by relatively brief examples - not a thorough textbook on R or data science This is intended to be a living document - optimal R packages for a given task change often and we welcome discussion about which to emphasize in this handbook Top tips for the course: DONT worry if you dont understand everything DO ask lots of questions! 1.2 Teaching We have: one lecture per week one workshop per week These are both timetabled in-person sessions, and you should check Timetabler for up to-date information on scheduling. However, all lessons can be accessed remotely through Collaborate, and everything you need to complete workshops will be available on this site. If you feel unwell, or cannot attend a session in-person because you need to self-isolate then dont worry you can access everything, and follow along in real time, or work at your own pace. Questions/issues/errors can all be posted on our Yammer page. 1.2.1 Workshops The workshops are the best way to learn, they teach you the practical skills you need to become an R wizard Figure 1.1: courtesy of Allison Horst 1.3 Introduction to R R is the name of the programming language itself and RStudio is a convenient interface.], which we will be using throughout the course in order to learn how to organise data, produce accurate data analyses &amp; data visualisations. Eventually we will also add extra tools like GitHub and RMarkdown for data reproducibility and collaborative programming, check out this short (and very cheesy) intro video.], which are collaboration and version control systems that we will be using throughout the course. More on this in future weeks. By the end of this module I hope you will have the tools to confidently analyze real data, make informative and beautiful data visuals, and be able to analyse lots of different types of data. The taught content this autumn will be given to you in several worksheets, these will be added to this dynamic webpage each week. 1.4 Getting around on RStudio All of our sessions will run on cloud-based software. All you have to do is make a free account, and join our Workspace BIO-5023Y the sharing link is here. Once you are signed up - you will see that there are two Spaces Your workspace BIO-5023Y Make sure you are working in the class workspace - there is a limit to the hours/month on your workspace, so all assigments and project work should take place in the BIO-5023Y space. Watch these short explainer videos to get used to navigating the environment. 1.4.1 An intro to RStudio RStudio Note - people often mix up R and RStudio. R is the programming language (the engine), RStudio is a handy interface/wrapper that makes things a bit easier to use. 1.4.2 Using R Studio Cloud RStudio Cloud works in exactly the same way as RStudio, but means you dont have to download any software. You can access the hosted cloud server and your projects through any browser connection (Chrome works best), from any computer. 1.5 Reading There are lots of useful books and online resources to help develop and improve your R knowledge. Throughout this webpage I will be adding useful resources for you. The core textbook you might want to bookmark is R for Data Science (Hadley Wickham 2020) but we will add others throughout the course, and their is a bibliography at the end which collects everything together! 1.6 Get Help! There are a lot of sources of information about using R out there. Here are a few helpful places to get help when you have an issue, or just to learn more The R help system itself - we cover this in Week one Error Vignettes - type browseVignettes() into the console and hit Enter, a list of available vignettes for all the packages we have will be displayed Cheat Sheets - available at RStudio.com. Most common packages have an associate cheat sheet covering the basics of how to use them. Download/bookmark ones we will use commonly such as ggplot2, Data transformation with dplyr, Data tidying with tidyr &amp; Data import. Google - I use Google constantly, because I continually forget how to do even basic tasks. If I want to remind myself how to round a number, I might type something like R round number - if I am using a particular package I should include that in the search term as well Ask for help - If you are stuck, getting an error message, cant think what to do next, then ask someone. It could be me, it could be a classmate. When you do this it is very important that you show the code, include the error message. This doesnt work is not helpful. Here is my code, this is the data I am using, I want it to do X, and heres the problem I get. Note - It may be daunting to send your code to someone for help. It is natural and common to feel apprehensive, or to think that your code is really bad. I still feel the same! But we learn when we share our mistakes, and eventually you will find it funny when you look back on your early mistakes, or laugh about the mistakes you still occasionally make! "],["getting-to-know-r-week-one.html", "Chapter 2 Getting to know R - Week One 2.1 Your first R command 2.2 true or false data 2.3 Storing outputs 2.4 Writing scripts 2.5 Error 2.6 Functions 2.7 Packages 2.8 My first data visualisation 2.9 Quitting", " Chapter 2 Getting to know R - Week One Go to RStudio Cloud and enter the Project labelled Week One - this will clone the project and provide you with your own workspace. Follow the instructions below to get used to the R command line, and how R works as a language. 2.1 Your first R command In the RStudio pane, navigate to the console (bottom left) and type or copy the below it should appear at the &gt; Hit Enter on your keyboard. 10 + 20 You should now be looking at the below: &gt; 10 + 20 [1] 30 The first line shows the request you made to R, the next line is Rs response You didnt type the &gt; symbol: thats just the R command prompt and isnt part of the actual command. Its important to understand how the output is formatted. Obviously, the correct answer to the sum 10 + 20 is 30, and not surprisingly R has printed that out as part of its response. But its also printed out this [1] part, which probably doesnt make a lot of sense to you right now. Youre going to see that a lot. You can think of [1] 30 as if R were saying the answer to the 1st question you asked is 30. 2.1.1 Typos Before we go on to talk about other types of calculations that we can do with R, theres a few other things I want to point out. The first thing is that, while R is good software, its still software. Its pretty stupid, and because its stupid it cant handle typos. It takes it on faith that you meant to type exactly what you did type. For example, suppose that you forgot to hit the shift key when trying to type +, and as a result your command ended up being 10 = 20 rather than 10 + 20. Try it for yourself and replicate this error message: 10 = 20 ## Error in 10 = 20: invalid (do_set) left-hand side to assignment Whats happened here is that R has attempted to interpret 10 = 20 as a command, and spits out an error message because the command doesnt make any sense to it. When a human looks at this, and then looks down at his or her keyboard and sees that + and = are on the same key, its pretty obvious that the command was a typo. But R doesnt know this, so it gets upset. And, if you look at it from its perspective, this makes sense. All that R knows is that 10 is a legitimate number, 20 is a legitimate number, and = is a legitimate part of the language too. In other words, from its perspective this really does look like the user meant to type 10 = 20, since all the individual parts of that statement are legitimate and its too stupid to realise that this is probably a typo. Therefore, R takes it on faith that this is exactly what you meant it only discovers that the command is nonsense when it tries to follow your instructions, typo and all. And then it whinges, and spits out an error. Even more subtle is the fact that some typos wont produce errors at all, because they happen to correspond to well-formed R commands. For instance, suppose that not only did I forget to hit the shift key when trying to type 10 + 20, I also managed to press the key next to one I meant do. The resulting typo would produce the command 10 - 20. Clearly, R has no way of knowing that you meant to add 20 to 10, not subtract 20 from 10, so what happens this time is this: 10 - 20 ## [1] -10 In this case, R produces the right answer, but to the the wrong question. 2.1.2 More simple arithmetic One of the best ways to get to know R is to play with it, its pretty difficult to break it so dont worry too much. Type whatever you want into to the console and see what happens. If the last line of your console looks like this &gt; 10+ + and theres a blinking cursor next to the plus sign. This means is that R is still waiting for you to finish. It thinks youre still typing your command, so it hasnt tried to execute it yet. In other words, this plus sign is actually another command prompt. Its different from the usual one (i.e., the &gt; symbol) to remind you that R is going to add whatever you type now to what you typed last time. For example, type 20 and hit enter, then it finishes the command: &gt; 10 + + 20 [1] 30 Alternatively hit escape, and R will forget what you were trying to do and return to a blank line. 2.1.3 Try some maths 1+7 13-10 4*6 12/3 Raise a number to the power of another 5^4 As Im sure everyone will probably remember the moment they read this, the act of multiplying a number \\(x\\) by itself \\(n\\) times is called raising \\(x\\) to the \\(n\\)-th power. Mathematically, this is written as \\(x^n\\). Some values of \\(n\\) have special names: in particular \\(x^2\\) is called \\(x\\)-squared, and \\(x^3\\) is called \\(x\\)-cubed. So, the 4th power of 5 is calculated like this: \\[ 5^4 = 5 \\times 5 \\times 5 \\times 5 \\] 2.1.4 Perform some combos Perform some mathematical combos, noting that the order in which R performs calculations is the standard one. That is, first calculate things inside Brackets (), then calculate Orders of (exponents) ^, then Division / and Multiplication *, then Addition + and Subtraction -. Notice the different outputs of these two commands. 3^2-5/2 (3^2-5)/2 Similarly if we want to raise a number to a fraction, we need to surround the fraction with parentheses () 16^1/2 16^(1/2) The first one calculates 16 raised to the power of 1, then divided this answer by two. The second one raises 16 to the power of a half. A big difference in the output. **Note - While the cursor is in the console, you can press the up arrow to see all your previous commands. You can run them again, or edit them. Later on we will look at scripts, as an essential way to re-use, store and edit commands. 2.2 true or false data Time to make a sidebar onto another kind of data. A key concept in that a lot of R relies on is the idea of a logical value. A logical value is an assertion about whether something is true or false. This is implemented in R in a pretty straightforward way. There are two logical values, namely TRUE and FALSE. Despite the simplicity, a logical values are very useful things. Lets see how they work. 2.2.1 Assessing mathematical truths In George Orwells classic book 1984, one of the slogans used by the totalitarian Party was two plus two equals five, the idea being that the political domination of human freedom becomes complete when it is possible to subvert even the most basic of truths. But they didnt have R. R will not be subverted. It has rather firm opinions on the topic of what is and isnt true, at least as regards basic mathematics. If I ask it to calculate 2 + 2, it always gives the same answer, and its not bloody 5: 2 + 2 Of course, so far R is just doing the calculations. I havent asked it to explicitly assert that \\(2+2 = 4\\) is a true statement. If I want R to make an explicit judgement, I can use a command like this: 2 + 2 == 4 What Ive done here is use the equality operator, ==, to force R to make a true or false judgement. Note that this is a very different operator to the assignment operator = you saw previously. A common typo that people make when trying to write logical commands in R (or other languages, since the = versus == distinction is important in most programming languages) is to accidentally type = when you really mean ==. Okay, lets see what R thinks of the Party slogan: 2+2 == 5 Take that Big Brother! Anyway, its worth having a look at what happens if I try to force R to believe that two plus two is five by making an assignment statement like 2 + 2 = 5 or 2 + 2 &lt;- 5. When I do this, heres what happens: 2 + 2 = 5 R doesnt like this very much. It recognises that 2 + 2 is not a variable (thats what the non-language object part is saying), and it wont let you try to reassign it. While R is pretty flexible, and actually does let you do some quite remarkable things to redefine parts of R itself, there are just some basic, primitive truths that it refuses to give up. It wont change the laws of addition, and it wont change the definition of the number 2. Thats probably for the best. 2.3 Storing outputs With simple questions like the ones above we are happy to just see the answer, but our quesitons are often more complex than this. If we need to take multiple steps, we benefit from being able to store our answers and recall them for use in later steps. This is very simple to do we can assign outputs to a name: a &lt;- 1+2 This literally means please assign the value of 1+2 to the name a. We use the assignment operator &lt;- to make this assignment. Note the shortcut key for &lt;- is Alt + - (Windows) or Option + - (Mac) If you perform this action you should be able to do two things You should be able to see that in the top right-hand pane in the Environment tab their is now an object called a with the value of 3. You should be able to look at what a is by typing it into your Console and pressing Enter a &gt; a [1] 3 You can now call this object at any time during your R session and perform calculations with it. 2 * a [1] 6 What happens if we assign a value to a named object that already exists in our R environment??? for example a &lt;- 10 a [1] 10 You should see that the previous assignment is lost, gone forever and has been replaced by the new value. We can assign lots of things to objects, and use them in calculations to build more objects. b &lt;- 5 c &lt;- a + b Note that if you now change the value of b, the value of c does not change. Objects are totally independent from each other once they are made b &lt;- 7 b c Look at the environment tab again - you should see its starting to fill up now! Note - RStudio will by default save the objects in its memory when you close a session. These will then be there the next time you logon. It might seem nice to be able to close things down and pick up where you left off, but its actually quite dangerous. Its messy, and can cause lots of problems when we work with scripts later, so dont do this!!! To stop RStudio from saving objects by default go to the Preferences option and change Save workspace to .RData on exit to Never. Instead we are going to learn how to use scripts to quickly re-run analyses we have been working on. 2.3.1 Choosing names Use informative variable names. As a general rule, using meaningful names like orange and apple is preferred over arbitrary ones like variable1 and variable2. Otherwise its very hard to remember what the contents of different variables actually are. Use short variable names. Typing is a pain and no-one likes doing it. So we much prefer to use a name like apple over a name like pink_lady_apple. Use one of the conventional naming styles for multi-word variable names. R only lets you use certain things as legal names. Legal names must start with a letter not a number, which can then be followed by a sequence of letters, numbers, ., or _. R does not like using spaces. Upper and lower case names are allowed, but R is case sensitive so Apple and apple are different. My favourite naming convention is snake_case short, lower case only, spaces between words are separated with a _. Its easy to read and easy to remember. 2.4 Writing scripts Until now we have been typing words directly into the Console. This is fine for short/simple calculations - but as soon as we have a more complex, multi-step process this becomes time consuming, error-prone and boring. Scripts are a document containing all of your commands (in the order you want them to run), they are repeatable, shareable, annotated records of what you have done. In short they are incredibly useful - and a big step towards open and reproducible research. To create a script go to File &gt; New File &gt; R Script. This will open a pane in the top-left of RStudio with a tab name of Untitled1. In your new script, type some of the basic arithmetic and assignment commands you used previously. When you write a script, make sure it has all of the commands you need to complete your analysis, in the order you want them to run. 2.4.1 Commenting on scripts Annotating your instructions provides yourself and others insights into why you are doing what you are doing. This is a vital aspect of a robust and reproducible workflow. And when you come back to a script, one week, one month or one year from now you will often wonder what a command was for. It is very, very useful to make notes for yourself, and its useful in case anyone else will ever read your script. Make these comments helpful they are for humans to read. In R we signal a comment with the # key. Everything in the line after a # is ignored by R and wont be treated as a command. You should see that it is marked in a different colour in your script. Put the following comment in your script. Try adding a few comments to your previous lines of code # I really love R 2.4.2 Running your script To run the commands from your script, we need to get it into the Console. You could select and copy/paste this into the Console. But there are a couple of faster shortcuts. Hit the Run button in the top right of the script pane. Pressing this will run the line of code the cursor is sitting on. Pressing Ctrl+Enter will do the same thing as hitting the Run button If you want to run the whole script in one go then press Ctrl+A then either click Run or press Ctrl+Enter 2.4.3 Saving your script Our script now contains code and comments from our first workshop. We need to save it. Alongside our data, our script is the most precious part of our analysis. We dont need to save anything else, any outputs etc. because our script can always be used to generate everything again. Note the colour of the script - the name changes colour when we have unsaved changes. Press the Save button or go to File &gt; Save as. Give the File a sensible name like Simple commands in R and in the bottom right pane under Files you should now be able to see your saved script. You could now safely quit R, and when you log on next time to this project, your script will be waiting for you. 2.5 Error Things will go wrong eventually, they always do R is very pedantic, even the smallest typo can result in failure and typos are impossilbe to avoid. So we will make mistakes. One type of mistake we will make is an error. The code fails to run. The most common causes for an error are: typos missing commas missing brackets Theres nothing wrong with making lots of errors. The trick is not to panic or get frustrated, but to read the error message and our script carefully and start to debug  and sometimes we need to walk away and come back later! Figure 2.1: courtesy of Allison Horst 2.6 Functions Functions are the tools of R. Each one helps us to do a different task. Take for example the function that we use to round a number to a certain number of digits - this function is called round Heres an example round(x = 2.4326782647, digits = 2) We start the command with the function name round. The name is followed by parentheses (). Within these we place the arguments for the function, each of which is separated by a comma. The arguments x = 2.4326782647 digits = 2 Arguments are the information we give to a function. These arguments are in the form name = value the name specifies the argument, and the value is what we are providing. That is the first argument x is the number we would like to round, it has a value of 2.4326782647. The second argument digits is how we would like the number to be rounded and we specify 2. Ok put the above commmand in your script and add a comment with # as to what you are doing. 2.6.1 Storing the output of functions What if we need the answer from a function in a later calculation. The answer is to use the assignment operator again. Can you work out what is going on here? If so copy this into your R script and a #comment next to each line. number_of_digits &lt;- 2 my_number &lt;- 2.4326782647 rounded_number &lt;- round(x = my_number, digits = number_of_digits) 2.6.2 More fun with functions Check this out round(2.4326782647, 2) We dont have to give the names of arguments for a function to still work. This works because the function round expects us to give the number value first, and the argument for rounding digits second. But this assumes we know the expected ordering within a function, this might be the case for functions we use a lot. If you give arguments their proper names then you can actually introduce them in any order you want. Try this: round(digits = 2, x = 2.4326782647) But this gives a different answer round(2, 2.4326782647) Are you happy with what is happening here? naming arguments overrides the position defaults Ok what about this? round(2.4326782647) We didnt specify how many digits to round to, but we still got an answer. Thats because in many functions arguments have defaults - the default argument here is digits = 0. So we dont have to specify the argument if we are happy for round to produce whole numbers. How do we know argument orders and defaults? Well we get to know how a lot of functions work through practice, but we can also use the inbuilt R help. This is a function - but now we specify the name of another function to provide a help menu. help(round) 2.7 Packages An R package is a container for various things including functions and data. These make it easy to do very complicate protocols by using custom-built functions. Later we will see how we can write our own simple functions. On RStudio Cloud I have already installed several add-on packages, all we need to do is use a simple function to load these packages into our workspace. Once this is complete we will have access to all the custom functions they contain. Lets try that now: library(ggplot2) library(palmerpenguins) Errors part 2 Another common source of errors is to call a function that is part of a package but forgetting to load the package. If R says something like Error in function-name then most likely the function was misspelled or the package containing the function hasnt been loaded. Packages are a lot like new apps extending the functionality of what your phone can do. To use the functionalities of a package they must be loaded before we call on the funcitons or data they contain. So the most sensible place to put library calls for packages is at the very top of our script. So lets do that now. 2.8 My first data visualisation Lets run our first data visualisation using the functions and data we have now loaded - this produces a plot using functions from the ggplot2 package (Wickham et al. (2020)) and data from the palmerpenguins (Horst, Hill, and Gorman (2020)) package. Use the # comments to add notes on what you are using each package for in your script. Using these functions we can write a simple line of code to produce a figure. We specify the data source, the variables to be used for the x and y axis and then the type of visual object to produce, colouring them by the species. Copy this into your console and hit Enter. ggplot(data = penguins,aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point(aes(colour=species)) Note - you may have noticed R gave you a warning. Not the same as a big scary error, but R wants you to be aware of something. In this case that two of the observations had missing data in them (either bill length or bill depth), so couldnt be plotted. The above command can also be written as below, its in a longer style with each new line for each argument in the function. This style can be easier to read, and makes it easier to write comments with #. Copy this longer command into your script then run it by either highlighting the entire command or placing the cursor in the first line and then hit Run or Ctrl+Enter. ggplot(data = penguins, # calls ggplot function, data is penguins aes(x = bill_length_mm, # sets x axis as bill length y = bill_depth_mm)) + # sets y axis value as bill depth geom_point(aes(colour=species)) # plot points coloured by penguin species 2.9 Quitting Make sure you have saved any changes to your R script - thats all you need to make sure youve done! If you want me to take a look at your script let me know If you spotted any mistakes or errors let me know Close your RStudio Cloud Browser Go to Blackboard to complete a short quiz! "],["workflow-part-one-week-two.html", "Chapter 3 Workflow Part One - Week Two 3.1 Meet the Penguins 3.2 The Question? 3.3 Preparing the data", " Chapter 3 Workflow Part One - Week Two Last week we got acquainted with some of the core skills associated with using R and RStudio. In this workshop we work through the journey of importing and tidying data. Once we have a curated and cleaned dataset we can work on generating insights from the data. We are going to be working as though we are in the latter stages of a research project, where data has been collected, possibly over several years, to test against our hypotheses. We have chosen to continue working with a dataset you have been introduced to already - the Palmer Penguins dataset. Previously we loaded a cleaned dataset, very quickly using an R package. Today we will be working in a more realistic scenario - uploading out dataset to our R workspace. 3.1 Meet the Penguins This data, taken from the palmerpenguins (Horst, Hill, and Gorman (2020)) package was originally published by Gorman, Williams, and Fraser (2014). The palmerpenguins data contains size measurements, clutch observations, and blood isotope ratios for three penguin species observed on three islands in the Palmer Archipelago, Antarctica over a study period of three years. These data were collected from 2007 - 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network. The data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license (No Rights Reserved) in accordance with the Palmer Station Data Policy. We gratefully acknowledge Palmer Station LTER and the US LTER Network. Special thanks to Marty Downs (Director, LTER Network Office) for help regarding the data license &amp; use. Here is our intrepid package co-author, Dr. Gorman, in action collecting some penguin data: Here is a map of the study site 3.1.1 Insights from data This dataset is relatively simple, as there arent too many variables to consider. But there are a reasonably large number of datapoints (individual penguins) making it possible to generate insights. However, there are some specific and rather common problems in this data. Problems that we need to work through before we can start to make any visuals or try to draw any conclusions. There are some problems with the variable names, there are some problems with some of the values. There are problems that one of the response variables isnt actually encoded on the dataset (we have to make it). Today we are going to Formulate clear research questions Import our dataset Learn how to prepare our RStudio Project workspace Learn how to clean, tidy and manipulate our data to allow tables, graphs and analyses to be run Dont worry if you dont understand exactly what each function does at the moment, or struggle to remember every concept we are introduced to. We will cover these again, in lots more detail as we progress. The main point is to get familiar with our process for handling data and organising our projects. 3.2 The Question? Imagine that you are a Penguin biologist. Chilly. And that you recently came across a study in the differences in the diets of penguin species. Different penguin species are known to eat different things, perhaps this has an effect on the morphology of their bills? Do male and female penguins have different bill morphologies? With simple measuring techniques and identification skills we can sex the penguins, identify their species and take simple non-invasive measurements of features such as body size, flipper length and bill dimensions. 3.2.1 The Hypothesis There will be a difference between the bill lengths of different penguin species 3.2.2 Study design 3.3 Preparing the data Imagine we have completed our practical study and have our data. The data is probably distributed in lots of places, originally notes collected in the field were probably on paper &amp; notebooks. Then someone will have taken time to transcribe those into a spreadsheet. This will almost certainly have been done by typing all the data in by hand. It is very important for us to know how we would like our data to be organised at the end. We are going to learn how to organise data using the tidy format1. This is because we are going to use the tidyverse packages by Wickham et al. (2019). This is an opinionated, but highly effective method for generating reproducible analyses with a wide-range of data manipulation tools. Tidy data is an easy format for computers to read. 3.3.1 Tidy data Here tidy refers to a specific structure that lets us manipulate and visualise data with ease. In a tidy dataset each variable is in one column and each row contains one observation. Each cell of the table/spreadsheet contains the values. Obe observation you might make about tidy data is it is quite long - it generates a lot of rows of data. Typing data in, using any spreadsheet program (e.g. Excel, Google sheets), if we type in the penguin data, we would make each row contain one observation about one penguin. If we made a second observation about a penguin (say in the next year of the study) it would get a new row in the dataset. You are probably thinking this is a lot of typing and a lot of repetition - and you are right! But this format allows the computer to easily make summaries at any level. If the data we input to R is untidy then we have to spend a little bit of time tidying, we will explore this more later. Once data has been typed up into a spreadsheet and double/triple-checked against the original paper records, then they are saved as a comma-separated values (CSV) file-type. These files are the simplest form of database, no coloured cells, no formulae, no text formatting. Each row is a row of the data, each value of a row (previously separate columns) is separated by a comma. It is convenient to use something like Excel to type in our data - its much more usefully friendly than trying to tpye something in csv format. But we dont save files in the Excel format because they have a nasty habit of formatting or even losing data when the file gets large enough.2 If you need to add data to a csv file, you can always open it in an Excel-like program and add more information. Figure 3.1: Top image: Penguins data viewed in Excel, Bottom image: Penguins data in native csv format It is possible to import data into R in an Excel format, but I recommend sticking with csv formats. Any spreadsheet can be easily converted with the Save As.. command. 3.3.2 The dataset (http://vita.had.co.nz/papers/tidy-data.pdf) https://www.theguardian.com/politics/2020/oct/05/how-excel-may-have-caused-loss-of-16000-covid-tests-in-england "],["references.html", "References", " References *R Cheat Sheets Gorman, KB, TD Williams, and WR Fraser. 2014. Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis). PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. Hadley Wickham, Garett Grolemund. 2020. R for Data Science. Boca Raton, Florida: Chapman; Hall/CRC. https://r4ds.had.co.nz/. Horst, Allison, Alison Hill, and Kristen Gorman. 2020. Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data. https://CRAN.R-project.org/package=palmerpenguins. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy DAgostino McGowan, Romain François, Garrett Grolemund, et al. 2019. Welcome to the tidyverse. Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686. Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2020. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2. "]]
